package com.lonfe.processor;import com.lonfe.entity.ClassInfo;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.ChannelInboundHandlerAdapter;import org.apache.log4j.Logger;import java.lang.reflect.Method;import java.util.concurrent.ConcurrentHashMap;public class InvokerHandler extends ChannelInboundHandlerAdapter {	Logger log = Logger.getLogger(InvokerHandler.class);	public static ConcurrentHashMap<String, Object> classMap = new ConcurrentHashMap<String, Object>();	@Override	public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {		ClassInfo classInfo = (ClassInfo) msg;		Object clazz = null;		if (!classMap.containsKey(classInfo.getClassName())) {			try {				log.info("request class " + classInfo.getClassName() + ", method " + classInfo.getMethodName());				clazz = Class.forName(ServiceExportor.getServiceByName(classInfo.getClassName()).getName() + "Impl").newInstance();				classMap.put(classInfo.getClassName(), clazz);			} catch (Exception e) {				e.printStackTrace();			}		} else {			clazz = classMap.get(classInfo.getClassName());		}		Method method = ServiceExportor.getServiceMeta(classInfo.getClassName()).getMethod(classInfo.getMethodName());		Object result = method.invoke(clazz, classInfo.getObjects());		ctx.write(result);		ctx.flush();		ctx.close();	}	@Override	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {		cause.printStackTrace();		ctx.close();	}}